plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.3.0"
}

apply plugin : 'eclipse'

dependencies {
    implementation 'io.github.lambdaprime:kineticstreamer:3.0'

    // transitively export following dependency to tests project
    apiElements 'io.github.lambdaprime:kineticstreamer:3.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

jar {
    manifest { 
        attributes 'Implementation-Version': "${rootProject.version}"
    }
}

sourceSets {
    main {
        java {
            srcDirs += ["src/main/gen/java"]
        }
    }
}

javadoc {
    options.noTimestamp = true;
    options.noQualifiers = ["all"];
    options.noTree = true;
    options.noIndex = true;
    options.noNavBar = true;
    // ignore missing @return, @param etc
    options.addBooleanOption('Xdoclint:all,-missing', true)
}

spotless {
    java {
        importOrder()
        removeUnusedImports()

        // Use Android style which has 4 whitespaces instead 2 by default
        googleJavaFormat().aosp().reflowLongStrings()

        licenseHeader '''/*
 * Copyright $YEAR jrosclient project
 * 
 * Website: https://github.com/lambdaprime/jrosmessages
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'''
    }
}
// run spotless and format code before the build
classes.dependsOn spotlessApply

def packageDir = "$buildDir/package/${projectName}"

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    from jar.archiveFile
    into "${packageDir}/libs"
}

task createPackage(type: Copy, dependsOn: [copyLibs]) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    into packageDir
}

task cleanRelease(type: Delete) {
    delete "$projectDir/release"
}

createRelease.dependsOn createPackage, javadoc
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

if (project.hasProperty('publish')) {

  // update version only during publishing
  task updateVersion() {
      if (version.contains("SNAPSHOT")) return;
      println "Updating version to " + version
      new id.xfunction.text.Substitutor()
          .withRegexpSupport()
          .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
              "io.github.lambdaprime:jrosmessages:[0-9.]+", "io.github.lambdaprime:jrosmessages:" + version
          ));
  }
  createPackage.dependsOn updateVersion

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'jrosmessages'
        groupId = 'io.github.lambdaprime'
        from components.java
        pom {
          name = 'jrosmessages'
          description = 'Java module with ROS (Robot Operating System) message definitions'
          url = 'http://portal2.atwebpages.com/jrosmessages'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'lambdaprime'
              email = 'intid@protonmail.com'
            }
          }

          scm {
            url = 'https://github.com/lambdaprime/jrosmessages'
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }    
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}
